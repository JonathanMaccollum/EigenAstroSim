name: EigenAstroSim Build, Test and Release

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main
  release:
    types: [published]

env:
  DOTNET_VERSION: '8.0.x'
  CONFIGURATION: 'Release'

jobs:
  build-and-test:
    runs-on: windows-latest
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Shallow clones should be disabled for better relevancy of analysis
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Extract version info
      id: version
      run: |
        if ($env:GITHUB_REF -match "refs/tags/v([0-9]+\.[0-9]+\.[0-9]+.*)") {
          $version = $matches[1]
          $versionPrefix = $version -replace '(-.*)', ''
          $versionSuffix = if ($version -match '-(.*)') { $matches[1] } else { '' }
          echo "VERSION=$version" >> $env:GITHUB_OUTPUT
          echo "VERSION_PREFIX=$versionPrefix" >> $env:GITHUB_OUTPUT
          echo "VERSION_SUFFIX=$versionSuffix" >> $env:GITHUB_OUTPUT
        } else {
          echo "VERSION=0.1.0-alpha" >> $env:GITHUB_OUTPUT
          echo "VERSION_PREFIX=0.1.0" >> $env:GITHUB_OUTPUT
          echo "VERSION_SUFFIX=alpha" >> $env:GITHUB_OUTPUT
        }
    
    - name: Restore dependencies
      run: dotnet restore
    
    - name: Build solution
      run: |
        $versionFlags = "/p:VersionPrefix=${{ steps.version.outputs.VERSION_PREFIX }}"
        dotnet build --configuration ${{ env.CONFIGURATION }} --no-restore $versionFlags    
    - name: Run tests
      run: dotnet test --configuration ${{ env.CONFIGURATION }} --no-build --verbosity normal
    
    - name: Pack NuGet packages
      if: github.event_name == 'release'
      run: |
        $versionFlags = "/p:VersionPrefix=${{ steps.version.outputs.VERSION_PREFIX }}"
        if ("${{ steps.version.outputs.VERSION_SUFFIX }}" -ne "") {
          $versionFlags += " /p:VersionSuffix=${{ steps.version.outputs.VERSION_SUFFIX }}"
        }
        dotnet pack --configuration ${{ env.CONFIGURATION }} --no-build --output ./artifacts $versionFlags
    
    - name: Upload build artifacts
      if: github.event_name == 'release'
      uses: actions/upload-artifact@v4
      with:
        name: EigenAstroSim-${{ steps.version.outputs.VERSION }}
        path: |
          ./artifacts/*.nupkg
          ./EigenAstroSim.UI.Views/bin/${{ env.CONFIGURATION }}/**/*
    
    - name: Publish NuGet packages
      if: github.event_name == 'release'
      run: |
        foreach ($file in Get-ChildItem -Path ./artifacts -Filter *.nupkg) {
          dotnet nuget push $file.FullName --api-key ${{ secrets.NUGET_API_KEY }} --source https://api.nuget.org/v3/index.json --skip-duplicate
        }
      continue-on-error: true

  code-analysis:
    runs-on: windows-latest
    needs: build-and-test
    
    steps:
    - uses: actions/checkout@v4
      with:
        fetch-depth: 0
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Install SonarScanner
      run: |
        dotnet tool install --global dotnet-sonarscanner
      continue-on-error: true
    
    - name: Run SonarCloud analysis
      if: github.event_name != 'pull_request' && github.repository_owner == 'YourUsername'
      run: |
        dotnet sonarscanner begin /k:"YourUsername_EigenAstroSim" /o:"your-organization" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io"
        dotnet build --configuration ${{ env.CONFIGURATION }}
        dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
      continue-on-error: true

  deploy:
    runs-on: windows-latest
    needs: [build-and-test, code-analysis]
    if: github.event_name == 'release'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
    
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: EigenAstroSim-${{ github.event.release.tag_name }}
        path: ./artifacts
    
    - name: Upload Release Assets
      uses: softprops/action-gh-release@v1
      with:
        files: ./artifacts/*
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}